import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from config import BOT_TOKEN
from states import TradeForm, CloseDealForm, PeriodStates, CoinStatStates
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import database as db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from aiogram.utils.keyboard import InlineKeyboardBuilder


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É")],
        [KeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥-–∂—É—Ä–Ω–∞–ª. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –ß–µ—Ä–Ω–æ–≤–∏–∫-—à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
def render_trade_template(data: dict) -> str:
    return (
        f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–¥–µ–ª–∫–∏\n\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∞: {data.get('coin') or '-'}\n"
        f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {data.get('timeframe') or '-'}\n"
        f"üì• –í—Ö–æ–¥: {data.get('entry') or '-'}\n"
        f"üíµ –°—É–º–º–∞: {data.get('usdt_amount') or '-'}\n"
        f"üìâ –ö–æ–º–∏—Å—Å–∏—è: {data.get('fee_entry_percent') or '-'}\n"
        f"üéØ –¶–µ–ª—å: {data.get('targets') or '-'}\n"
        f"üõë –°—Ç–æ–ø: {data.get('stop') or '-'}\n"
        f"üìö –ü—Ä–∏—á–∏–Ω–∞: {data.get('reason') or '-'}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {data.get('status') or '-'}\n"
    )

# –ß–µ—Ä–Ω–æ–≤–∏–∫-—à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏

async def render_trade_info_message(callback_or_message, trade_id: int):
    async with aiosqlite.connect("trades.db") as db:
        cursor = await db.execute('''
            SELECT coin, timeframe, entry, targets, stop, usdt_amount, fee_entry_percent, reason, created_at
            FROM trades
            WHERE id = ?
        ''', (trade_id,))
        trade = await cursor.fetchone()

    if not trade:
        await callback_or_message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    coin, tf, entry, targets, stop, amount, fee, reason, created = trade
    text = (
        f"üßæ –°–¥–µ–ª–∫–∞ #{trade_id}\n\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∞: #{coin}\n"
        f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf or '-'}\n"
        f"üì• –í—Ö–æ–¥: ${entry:.2f}\n"
        f"üíµ –°—É–º–º–∞: {amount} USDT\n"
        f"üìâ –ö–æ–º–∏—Å—Å–∏—è: {fee}%\n"
        f"üéØ –¶–µ–ª—å: {targets or '-'}\n"
        f"üõë –°—Ç–æ–ø: {stop or '-'}\n"
        f"üìö –ü—Ä–∏—á–∏–Ω–∞: {reason or '-'}\n"
        f"üìÖ –î–∞—Ç–∞: {created.split()[0]}"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîí –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"start_close:{trade_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_open_trades")]
    ])

    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.message.edit_text(text, reply_markup=markup)
    else:
        await callback_or_message.answer(text, reply_markup=markup)



async def show_trade_draft(message_or_callback, state: FSMContext):
    data = await state.get_data()
    text = render_trade_template(data)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™ô –ú–æ–Ω–µ—Ç–∞", callback_data="set_coin")],
        [InlineKeyboardButton(text="‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º", callback_data="set_timeframe")],
        [InlineKeyboardButton(text="üì• –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", callback_data="set_entry")],
        [InlineKeyboardButton(text="üíµ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏", callback_data="set_usdt")],
        [InlineKeyboardButton(text="üìâ –ö–æ–º–∏—Å—Å–∏—è", callback_data="set_fee")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª—å", callback_data="set_targets")],
        [InlineKeyboardButton(text="üõë –°—Ç–æ–ø", callback_data="set_stop")],
        [InlineKeyboardButton(text="üìö –ü—Ä–∏—á–∏–Ω–∞", callback_data="set_reason")],
        [InlineKeyboardButton(text="üìå –°—Ç–∞—Ç—É—Å", callback_data="set_status")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="save_trade")]
    ])

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–ª–∏—á–∞–µ–º callback –∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=markup)
    else:
        await message_or_callback.answer(text, reply_markup=markup)


# –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É"
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É")
async def new_trade(message: Message, state: FSMContext):
    await state.set_state(TradeForm.creating_trade)
    # —Å–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        coin=None, timeframe=None, entry=None,
        usdt_amount=None, fee_entry_percent=None,
        targets=None, stop=None, reason=None,
        status=None, close_price=None, pnl=None,
        tags=None, comment=None
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    await show_trade_draft(message, state)


#–û–±—Ä–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–Ω–µ—Ç–∞"
@dp.callback_query(F.data == "set_coin")
async def set_coin_callback(callback: CallbackQuery, state: FSMContext):
    coins = ["BTC/USDT", "ETH/USDT", "SOL/USDT", "TON/USDT", "DOGE/USDT", "XRP/USDT", "–î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=coin, callback_data=f"coin:{coin}")] for coin in coins
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É:", reply_markup=keyboard)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–¥–Ω—É –∏–∑ –º–æ–Ω–µ—Ç
@dp.callback_query(F.data.startswith("coin:"))
async def coin_chosen(callback: CallbackQuery, state: FSMContext):
    coin = callback.data.split(":")[1]
    if coin == "–î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞":
        await state.set_state(TradeForm.coin_manual)
        await callback.message.edit_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT):")
    else:
        await state.update_data(coin=coin)
        await state.set_state(TradeForm.creating_trade)

        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        await show_trade_draft(callback, state)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–æ–Ω–µ—Ç—ã
@dp.message(TradeForm.coin_manual)
async def trade_coin_manual(message: Message, state: FSMContext):
    await state.update_data(coin=message.text)
    await state.set_state(TradeForm.creating_trade)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
    await show_trade_draft(message, state)

# –í–≤–æ–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
@dp.callback_query(F.data == "set_timeframe")
async def set_timeframe_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1H", callback_data="tf:1H"), InlineKeyboardButton(text="4H", callback_data="tf:4H")],
        [InlineKeyboardButton(text="1D", callback_data="tf:1D"), InlineKeyboardButton(text="1W", callback_data="tf:1W")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=keyboard)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
@dp.callback_query(F.data.startswith("tf:"))
async def timeframe_chosen(callback: CallbackQuery, state: FSMContext):
    tf = callback.data.split(":")[1]
    await state.update_data(timeframe=tf)
    await state.set_state(TradeForm.creating_trade)

    # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await show_trade_draft(callback, state)

# –ö–Ω–æ–ø–∫–∞ "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞"
@dp.callback_query(F.data == "set_entry")
async def set_entry_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.entry)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ ($):")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
@dp.message(TradeForm.entry)
async def trade_entry(message: Message, state: FSMContext):
    try:
        entry_price = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ ($).")
        return

    await state.update_data(entry=entry_price)
    await state.set_state(TradeForm.creating_trade)

    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    await show_trade_draft(message, state)

# –ö–Ω–æ–ø–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏
@dp.callback_query(F.data == "set_usdt")
async def set_usdt_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.usdt_amount)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ USDT:")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
@dp.message(TradeForm.usdt_amount)
async def trade_usdt_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ USDT.")
        return

    await state.update_data(usdt_amount=amount)
    await state.set_state(TradeForm.creating_trade)

    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    await show_trade_draft(message, state)

# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ö–æ–º–∏—Å—Å–∏—è"
# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî –ø–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
@dp.callback_query(F.data == "set_fee")
async def set_fee_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="0.1%", callback_data="fee:0.1"), InlineKeyboardButton(text="0.18%", callback_data="fee:0.18")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç", callback_data="fee:custom")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–º–∏—Å—Å–∏–µ–π
@dp.callback_query(F.data.startswith("fee:"))
async def fee_chosen(callback: CallbackQuery, state: FSMContext):
    fee_value = callback.data.split(":")[1]

    if fee_value == "custom":
        await state.set_state(TradeForm.fee_entry_custom)
        await callback.message.edit_text("–í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é (%):")
    else:
        await state.update_data(fee_entry_percent=float(fee_value))
        await state.set_state(TradeForm.creating_trade)

        # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–±–ª–æ–Ω—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        await show_trade_draft(callback, state)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
@dp.message(TradeForm.fee_entry_custom)
async def fee_entry_custom_manual(message: Message, state: FSMContext):
    try:
        fee = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(fee_entry_percent=fee)
    await state.set_state(TradeForm.creating_trade)

    # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–±–ª–æ–Ω—É
    await show_trade_draft(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ü–µ–ª–∏
@dp.callback_query(F.data == "set_targets")
async def set_targets_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.targets)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500 / 2700):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏
@dp.message(TradeForm.targets)
async def trade_targets(message: Message, state: FSMContext):
    await state.update_data(targets=message.text)
    await state.set_state(TradeForm.creating_trade)

    await show_trade_draft(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ–ø–∞
@dp.callback_query(F.data == "set_stop")
async def set_stop_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.stop)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Å—Ç–æ–ø ($):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–ø–∞
@dp.message(TradeForm.stop)
async def trade_stop(message: Message, state: FSMContext):
    try:
        stop = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(stop=stop)
    await state.set_state(TradeForm.creating_trade)

    await show_trade_draft(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
@dp.callback_query(F.data == "set_reason")
async def set_reason_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.reason)
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –≤—Ö–æ–¥–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
@dp.message(TradeForm.reason)
async def trade_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await state.set_state(TradeForm.creating_trade)

    await show_trade_draft(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å"
@dp.callback_query(F.data == "set_status")
async def set_status_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –í –ø–æ–∑–∏—Ü–∏–∏", callback_data="status:–í –ø–æ–∑–∏—Ü–∏–∏")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é", callback_data="status:–ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é")],
        [InlineKeyboardButton(text="üõë –ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É", callback_data="status:–ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É")],
        [InlineKeyboardButton(text="‚úã –ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é", callback_data="status:manual_close")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
@dp.callback_query(F.data.startswith("status:"))
async def status_chosen(callback: CallbackQuery, state: FSMContext):
    status_value = callback.data.split(":", 1)[1]

    if status_value == "manual_close":
        await state.set_state(TradeForm.manual_close_price)
        await callback.message.edit_text("üîí –í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è ($) –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:")
    else:
        await state.update_data(status=status_value)
        await state.set_state(TradeForm.creating_trade)
        await show_trade_draft(callback, state)

#–ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(TradeForm.manual_close_price)
async def manual_close_price_handler(message: Message, state: FSMContext):
    try:
        price = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è ($).")
        return

    await state.update_data(manual_close_price=price)

    # –ö–Ω–æ–ø–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="0.1%", callback_data="manualfee:0.1"),
         InlineKeyboardButton(text="0.18%", callback_data="manualfee:0.18")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manualfee:custom")]
    ])

    await state.set_state(TradeForm.manual_close_fee_select)
    await message.answer("üìâ –í—ã–±–µ—Ä–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏
@dp.callback_query(F.data.startswith("manualfee:"))
async def manual_close_fee_handler(callback: CallbackQuery, state: FSMContext):
    fee_value = callback.data.split(":")[1]

    if fee_value == "custom":
        await state.set_state(TradeForm.manual_close_fee_custom)
        await callback.message.edit_text("üìâ –í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ (%):")
    else:
        price = (await state.get_data()).get("manual_close_price")
        await state.update_data(
            status=f"–ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é ${price}, –∫–æ–º–∏—Å—Å–∏—è {fee_value}%",
            manual_close_price=None
        )
        await state.set_state(TradeForm.creating_trade)
        await show_trade_draft(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∏—Å—Å–∏–∏
@dp.message(TradeForm.manual_close_fee_custom)
async def manual_fee_custom_entry(message: Message, state: FSMContext):
    try:
        fee = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (%).")
        return

    price = (await state.get_data()).get("manual_close_price")
    await state.update_data(
        status=f"–ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é ${price}, –∫–æ–º–∏—Å—Å–∏—è {fee}%",
        manual_close_price=None
    )
    await state.set_state(TradeForm.creating_trade)
    await show_trade_draft(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É"
@dp.callback_query(F.data == "save_trade")
async def ask_comment_choice(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="comment:yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="comment:no")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="comment:back")]
    ])
    await callback.message.edit_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–¥–∞/–Ω–µ—Ç)
@dp.callback_query(F.data.startswith("comment:"))
async def comment_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]

    if choice == "yes":
        await state.set_state(TradeForm.comment)
        await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ:")
    elif choice == "no":
        await state.update_data(comment=None)
        await finalize_trade(callback, state)
    elif choice == "back":
        await state.set_state(TradeForm.creating_trade)
        await show_trade_draft(callback, state)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
def validate_trade_data(data: dict) -> tuple[bool, list[str]]:
    missing_fields = []

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
    if not data.get('coin'):
        missing_fields.append("–º–æ–Ω–µ—Ç–∞")
    if not data.get('entry'):
        missing_fields.append("—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞")
    if not data.get('usdt_amount'):
        missing_fields.append("—Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ (USDT)")
    if not data.get('fee_entry_percent'):
        missing_fields.append("–∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—Ö–æ–¥–µ")
    if not data.get('status'):
        missing_fields.append("—Å—Ç–∞—Ç—É—Å")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status = data.get('status')
    if status == "–ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é" and not data.get('targets'):
        missing_fields.append("—Ü–µ–ª—å")
    if status == "–ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É" and not data.get('stop'):
        missing_fields.append("—Å—Ç–æ–ø")

    return len(missing_fields) == 0, missing_fields


# –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É
@dp.callback_query(F.data == "back_to_draft")
async def back_to_draft(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.creating_trade)
    await show_trade_draft(callback, state)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç—ã
async def finalize_trade(source: Message | CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    is_valid, missing = validate_trade_data(data)
    if not is_valid:
        missing_text = ", ".join(missing)
        warning = f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:\n\nüî∏ {missing_text}"

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É", callback_data="back_to_draft")]
        ])

        if isinstance(source, CallbackQuery):
            await source.message.edit_text(warning, reply_markup=markup)
        else:
            await source.answer(warning)
            await source.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:", reply_markup=markup)
        return


    entry = data.get("entry")
    usdt_amount = data.get("usdt_amount")
    entry_fee = data.get("fee_entry_percent", 0.0)
    status = data.get("status")

    close_price = None
    exit_fee = 0.0
    profit = None
    pnl = None
    trade_status = "–æ—Ç–∫—Ä—ã—Ç–∞"

    try:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—Ö–æ–¥
        coins = (usdt_amount / entry) * (1 - entry_fee / 100)
    except ZeroDivisionError:
        if isinstance(source, CallbackQuery):
            await source.message.edit_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: –ø—Ä–æ–≤–µ—Ä—å –≤—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É –∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.")
        else:
            await source.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: –ø—Ä–æ–≤–µ—Ä—å –≤—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É –∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.")
        return

    if status == "–ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é":
        close_price = float(data.get("targets").split("/")[0].strip())
        exit_fee = 0.18
        trade_status = "–∑–∞–∫—Ä—ã—Ç–∞"
    elif status == "–ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É":
        close_price = float(data.get("stop"))
        exit_fee = 0.18
        trade_status = "–∑–∞–∫—Ä—ã—Ç–∞"
    elif status.startswith("–ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é"):
        close_price = float(data.get("close_price"))
        exit_fee = float(data.get("fee_exit"))
        trade_status = "–∑–∞–∫—Ä—ã—Ç–∞"

    if close_price:
        final_usdt = (coins * close_price) * (1 - exit_fee / 100)
        profit = final_usdt - usdt_amount
        pnl = (profit / usdt_amount) * 100
        data["close_price"] = close_price
        data["pnl"] = round(pnl, 2)
        data["profit_usdt"] = round(profit, 2)
        data["fee_exit_percent"] = exit_fee
    else:
        
        data["close_price"] = None
        data["pnl"] = None
        data["profit_usdt"] = None
        data["fee_exit_percent"] = None

    # –£–ø—Ä–æ—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ "–æ—Ç–∫—Ä—ã—Ç–∞"/"–∑–∞–∫—Ä—ã—Ç–∞"
    data["status"] = trade_status

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    user_id = source.from_user.id
    chat_id = source.message.chat.id if isinstance(source, CallbackQuery) else source.chat.id
    await db.insert_trade(user_id, chat_id, data)
    await state.clear()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    comment = data.get("comment") or "-"
    base_msg = (
        f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {trade_status.capitalize()}\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∞: #{data.get('coin')}\n"
        f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {data.get('timeframe') or '-'}\n"
        f"üì• –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry}\n"
        f"üíµ –°—É–º–º–∞: {usdt_amount} USDT\n"
        f"üéØ –¶–µ–ª—å: {data.get('targets') or '-'}\n"
        f"üõë –°—Ç–æ–ø: {data.get('stop') or '-'}\n"
        f"üìö –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    )

    if trade_status == "–∑–∞–∫—Ä—ã—Ç–∞":
        base_msg += (
            f"üìâ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {close_price}\n"
            f"üìà PnL: {data['pnl']}%\n"
            f"üí∞ –ü—Ä–æ—Ñ–∏—Ç: {data['profit_usdt']} USDT\n"
        )

    await source.message.answer(base_msg)


# –ï—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@dp.message(TradeForm.comment)
async def save_comment_and_trade(message: Message, state: FSMContext):
    await state.update_data(comment=message.text.strip())
    await finalize_trade(message, state)


@dp.message(F.text == "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")
async def open_trades_menu(message: Message):
    trades = await db.get_open_trades(message.from_user.id)

    if not trades:
        await message.answer("üòé –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    buttons = []
    for trade_id, coin, usdt_amount in trades:
        text = f"{coin} - {usdt_amount:.2f} USDT"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"openinfo:{trade_id}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(f"üìÇ –£ –≤–∞—Å {len(trades)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫:", reply_markup=keyboard)


# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
@dp.message(F.text == "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")
async def open_trades_menu(message: Message):
    trades = await db.get_open_trades(message.from_user.id)

    if not trades:
        await message.answer("üòé –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    buttons = []
    for trade_id, coin, usdt_amount in trades:
        text = f"{coin} - {usdt_amount:.2f} USDT"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"openinfo:{trade_id}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(f"üìÇ –£ –≤–∞—Å {len(trades)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("openinfo:"))
async def show_trade_info(callback: CallbackQuery):
    trade_id = int(callback.data.split(":")[1])
    await render_trade_info_message(callback, trade_id)

# –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
async def show_close_draft(message_or_callback, state: FSMContext):
    data = await state.get_data()
    trade = data["selected_trade"]

    close_price = data.get("close_price") or "-"
    close_fee = data.get("close_fee") or "-"

    text = (
        f"üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏\n\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∞: {trade['coin']}\n"
        f"üì• –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trade['entry']}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—Ö–æ–¥–∞: {trade['created_at'].split()[0]}\n\n"
        f"üìâ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {close_price}\n"
        f"üìä –ö–æ–º–∏—Å—Å–∏—è –≤—ã—Ö–æ–¥–∞: {close_fee}%\n"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìâ –í–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è", callback_data="set_close_price")],
        [InlineKeyboardButton(text="üìä –í–≤–µ—Å—Ç–∏ –∫–æ–º–∏—Å—Å–∏—é", callback_data="set_close_fee")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ", callback_data="confirm_close_trade")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_info:{trade['id']}")]
    ])

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=markup)
    else:
        await message_or_callback.answer(text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
@dp.callback_query(F.data.startswith("back_to_info:"))
async def back_to_trade_info(callback: CallbackQuery, state: FSMContext):
    trade_id = int(callback.data.split(":")[1])
    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å "loading..."
    await render_trade_info_message(callback, trade_id)

@dp.callback_query(F.data.startswith("start_close:"))
async def start_close_trade(callback: CallbackQuery, state: FSMContext):
    trade_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    async with aiosqlite.connect("trades.db") as db_conn:
        cursor = await db_conn.execute('''
            SELECT id, coin, entry, usdt_amount, fee_entry_percent, created_at
            FROM trades
            WHERE id = ?
        ''', (trade_id,))
        row = await cursor.fetchone()

    if not row:
        await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    trade_id, coin, entry, usdt_amount, fee_entry_percent, created_at = row

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSMContext
    await state.set_state(CloseDealForm.closing_trade)
    await state.update_data({
        "selected_trade": {
            "id": trade_id,
            "coin": coin,
            "entry": entry,
            "created_at": created_at
        },
        "usdt_amount": usdt_amount,
        "fee_entry_percent": fee_entry_percent
    })

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    await show_close_draft(callback, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.callback_query(F.data == "set_close_price")
async def prompt_close_price(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_close_draft")]
    ])
    await state.set_state(CloseDealForm.entering_close_price)
    await callback.message.edit_text("üìâ –í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è ($):", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(CloseDealForm.entering_close_price)
async def receive_close_price(message: Message, state: FSMContext):
    try:
        price = float(message.text.strip())
        await state.update_data(close_price=price)
        await state.set_state(CloseDealForm.closing_trade)
        await show_close_draft(message, state)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏
@dp.callback_query(F.data == "set_close_fee")
async def prompt_close_fee(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="0.1%", callback_data="close_fee:0.1"),
            InlineKeyboardButton(text="0.18%", callback_data="close_fee:0.18")
        ],
        [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="close_fee:custom")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_close_draft")]
    ])
    await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏ –∫–æ–º–∏—Å—Å–∏—é –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
@dp.callback_query(F.data.startswith("close_fee:"))
async def handle_close_fee(callback: CallbackQuery, state: FSMContext):
    value = callback.data.split(":")[1]

    if value == "custom":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_close_draft")]
        ])
        await state.set_state(CloseDealForm.entering_close_fee)
        await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é (%):", reply_markup=keyboard)
    else:
        try:
            await state.update_data(close_fee=float(value))
            await state.set_state(CloseDealForm.closing_trade)
            await show_close_draft(callback, state)
        except ValueError:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∏—Å—Å–∏–∏
@dp.callback_query(F.data == "close_fee:custom")
async def handle_custom_fee(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_close_draft")]
    ])
    await state.set_state(CloseDealForm.entering_close_fee)
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é (%):", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∏—Å—Å–∏–∏ –≤—Ä—É—á–Ω—É—é
@dp.message(CloseDealForm.entering_close_fee)
async def receive_close_fee(message: Message, state: FSMContext):
    try:
        fee = float(message.text.strip())
        await state.update_data(close_fee=fee)
        await state.set_state(CloseDealForm.closing_trade)
        await show_close_draft(message, state)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ show_trade_info
@dp.callback_query(F.data == "back_to_open_trades")
async def back_to_open_trades(callback: CallbackQuery):
    trades = await db.get_open_trades(callback.from_user.id)

    if not trades:
        await callback.message.edit_text("üòé –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    buttons = []
    for trade_id, coin, usdt_amount in trades:
        text = f"{coin} - {usdt_amount:.2f} USDT"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"openinfo:{trade_id}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(f"üìÇ –£ –≤–∞—Å {len(trades)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–Ω–∞–∑–∞–¥" –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–µ–Ω—ã –∏ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.callback_query(F.data == "back_to_close_draft")
async def back_to_close_draft(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if "selected_trade" not in data:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.set_state(CloseDealForm.closing_trade)
    await show_close_draft(callback, state)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
@dp.callback_query(F.data == "confirm_close_trade")
async def confirm_close_warning(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    trade = data.get("selected_trade")

    if not trade:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return

    close_price = data.get("close_price")
    close_fee = data.get("close_fee")

    # –ï–°–õ–ò –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∏–ª–∏ –∫–æ–º–∏—Å—Å–∏—è ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    if close_price is None or close_fee is None:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_close_draft")]
        ])
        await callback.message.edit_text(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –∫–æ–º–∏—Å—Å–∏—é –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.",
            reply_markup=keyboard
        )
        return

    # –ï–°–õ–ò –≤—Å—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    text = (
        f"‚ö†Ô∏è –¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –ø–æ –º–æ–Ω–µ—Ç–µ {trade['coin']}\n\n"
        f"üìâ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {close_price}\n"
        f"üìä –ö–æ–º–∏—Å—Å–∏—è: {close_fee}%\n\n"
        f"‚ùó –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ?"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="final_close_trade")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_close_draft")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)

# –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏
@dp.callback_query(F.data == "final_close_trade")
async def finalize_close_trade(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    trade = data["selected_trade"]

    entry = float(trade["entry"])
    amount = float(data["usdt_amount"])
    entry_fee = float(data["fee_entry_percent"])
    close_price = float(data["close_price"])
    close_fee = float(data["close_fee"])

    coins = (amount / entry) * (1 - entry_fee / 100)
    final_usdt = (coins * close_price) * (1 - close_fee / 100)

    profit = final_usdt - amount
    pnl = (profit / amount) * 100

    data.update({
        "status": "–∑–∞–∫—Ä—ã—Ç–∞",
        "close_price": close_price,
        "fee_exit_percent": close_fee,
        "profit_usdt": round(profit, 2),
        "pnl": round(pnl, 2),
        "closed_at": "CURRENT_TIMESTAMP"
    })

    await db.close_trade(trade['id'], data)
    await state.clear()

    text = (
        f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞\n\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∞: {trade['coin']}\n"
        f"üì• –í—Ö–æ–¥: ${entry}\n"
        f"üìâ –ó–∞–∫—Ä—ã—Ç–∏–µ: ${close_price}\n"
        f"üíµ –°—É–º–º–∞: {amount} USDT\n"
        f"üìà PnL: {data['pnl']}%\n"
        f"üí∞ –ü—Ä–æ—Ñ–∏—Ç: {data['profit_usdt']} USDT"
    )
    await callback.message.edit_text(text)





# 
# 
# 
# –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def calculate_stats(trades: list) -> tuple[float, float, int, float]:
    total_pnl = 0
    total_profit = 0
    win_count = 0

    for trade in trades:
        pnl = trade['pnl'] or 0
        profit = trade['profit_usdt'] or 0

        total_pnl += pnl
        total_profit += profit
        if pnl > 0:
            win_count += 1

    total_count = len(trades)
    average_pnl = total_pnl / total_count if total_count else 0
    winrate = (win_count / total_count) * 100 if total_count else 0

    return average_pnl, total_profit, total_count, winrate


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_main_statistics(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    now = datetime.now()
    today = now.strftime("%Y-%m-%d")
    first_day_of_month = today

    closed_trades = await db.get_closed_trades_in_period(user_id, first_day_of_month, today)
    open_trades = await db.get_open_trades_count(user_id)

    if not closed_trades:
        text = "‚ùó –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ."
    else:
        average_pnl, total_profit, count, winrate = await calculate_stats(closed_trades)

        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {now.strftime('%d.%m.%Y')}\n\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–π PnL: {average_pnl:.2f}%\n"
            f"üí∞ –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.2f} USDT\n"
            f"üìã –ó–∞–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {count}\n"
            f"üèÜ Winrate: {winrate:.2f}%\n"
            f"üìÇ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ —Å–µ–π—á–∞—Å: {open_trades}\n\n"
            f"–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\nüëá –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ:"
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="stat_period")],
        [InlineKeyboardButton(text="ü™ô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ", callback_data="stat_coin")]
    ])

    return text, keyboard

# –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    text, keyboard = await get_main_statistics(message.from_user.id)
    await message.answer(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"
@dp.callback_query(F.data == "stat_period")
async def choose_period(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÜ –ó–∞ 7 –¥–Ω–µ–π", callback_data="period:7")],
        [InlineKeyboardButton(text="üìÜ –ó–∞ 14 –¥–Ω–µ–π", callback_data="period:14")],
        [InlineKeyboardButton(text="üìÜ –ó–∞ 30 –¥–Ω–µ–π", callback_data="period:30")],
        [InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period:custom")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_stats")]
    ])
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞

@dp.callback_query(F.data.startswith("period:"))
async def handle_period_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]

    if choice == "custom":
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        await state.set_state(PeriodStates.selecting_start_date)
        await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=await calendar_with_back("stat_period"))
        return

    days = int(choice)
    now = datetime.now()
    end_date = now.strftime("%Y-%m-%d")
    start_date = (now - timedelta(days=days)).strftime("%Y-%m-%d")

    user_id = callback.from_user.id
    closed_trades = await db.get_closed_trades_in_period(user_id, start_date, end_date)

    if not closed_trades:
        await callback.message.edit_text(f"‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
        return

    average_pnl, total_profit, count, winrate = await calculate_stats(closed_trades)

    text = (
        f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"
        f"üìà –°—Ä–µ–¥–Ω–∏–π PnL: {average_pnl:.2f}%\n"
        f"üí∞ –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.2f} USDT\n"
        f"üìã –ó–∞–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {count}\n"
        f"üèÜ Winrate: {winrate:.2f}%\n\n"
        f"üîô –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stat_period")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥")
async def calendar_with_back(callback_back: str) -> InlineKeyboardMarkup:
    calendar_markup = await SimpleCalendar().start_calendar()
    builder = InlineKeyboardBuilder()

    for row in calendar_markup.inline_keyboard:
        builder.row(*row)  # –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_back)
    )

    return builder.as_markup()


# –°–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.callback_query(SimpleCalendarCallback.filter())
async def process_calendar(callback: CallbackQuery, callback_data: dict, state: FSMContext):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)

    if selected:
        current_state = await state.get_state()

        if current_state == PeriodStates.selecting_start_date:
            await state.update_data(start_date=date.strftime("%Y-%m-%d"))
            await state.set_state(PeriodStates.selecting_end_date)
            await callback.message.edit_text(
                "üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:",
                reply_markup=await calendar_with_back("stat_period")
            )

        elif current_state == PeriodStates.selecting_end_date:
            data = await state.get_data()
            start_date = data.get("start_date")
            end_date = date.strftime("%Y-%m-%d")

            if end_date < start_date:
                await callback.message.edit_text(
                    "‚ùó –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏ —Å–Ω–æ–≤–∞:",
                    reply_markup=await calendar_with_back("stat_period")
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
            user_id = callback.from_user.id
            closed_trades = await db.get_closed_trades_in_period(user_id, start_date, end_date)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stat_period")]
            ])

            if not closed_trades:
                await callback.message.edit_text(
                    f"‚ùó –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}.",
                    reply_markup=keyboard
                )
                await state.clear()
                return

            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            average_pnl, total_profit, count, winrate = await calculate_stats(closed_trades)

            text = (
                f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}\n\n"
                f"üìà –°—Ä–µ–¥–Ω–∏–π PnL: {average_pnl:.2f}%\n"
                f"üí∞ –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.2f} USDT\n"
                f"üìã –ó–∞–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {count}\n"
                f"üèÜ Winrate: {winrate:.2f}%\n\n"
                f"üîô –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥:"
            )

            await callback.message.edit_text(text, reply_markup=keyboard)
            await state.clear()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
@dp.callback_query(F.data == "back_to_main_stats")
async def back_to_main_stats(callback: CallbackQuery):
    text, keyboard = await get_main_statistics(callback.from_user.id)
    await callback.message.edit_text(text, reply_markup=keyboard)




# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–æ–Ω–µ—Ç–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ"
@dp.callback_query(F.data == "stat_coin")
async def choose_coin(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    coins = await db.get_active_coins(user_id)

    keyboard = InlineKeyboardBuilder()
    for coin in coins:
        keyboard.button(text=coin, callback_data=f"coin_stat:{coin}")
    keyboard.button(text="‚úçÔ∏è –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞", callback_data="coin_stat_manual")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_stats")
    markup = keyboard.as_markup()

    text = "ü™ô –í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏ –≤—Ä—É—á–Ω—É—é.\n(–ü–æ–∫–∞–∑–∞–Ω—ã –º–æ–Ω–µ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–º–∏ —Å–¥–µ–ª–∫–∞–º–∏):"
    await callback.message.edit_text(text, reply_markup=markup)

# –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(F.data.startswith("coin_stat:"))
async def show_coin_statistics(callback: CallbackQuery):
    coin = callback.data.split(":")[1]
    user_id = callback.from_user.id

    stats = await db.get_coin_statistics(user_id, coin)
    if not stats:
        await callback.message.edit_text("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ.", reply_markup=await back_to_coin_stats_keyboard())
        return

    text = (
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ {coin}\n\n"
        f"üìã –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}\n"
        f"üìà –û–±—â–∏–π PnL: {stats['average_pnl']:.2f}%\n"
        f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {stats['total_profit']:.2f} USDT\n"
        f"üèÜ Winrate: {stats['winrate']:.2f}%\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {stats['last_trade_date'] or '-'}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="coin_stat_period")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="coin_trade_history")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stat_coin")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞"
@dp.callback_query(F.data == "coin_stat_manual")
async def enter_manual_coin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CoinStatStates.entering_manual_coin)
    await callback.message.edit_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏ –º–æ–Ω–µ—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ BTC/USDT:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–æ–Ω–µ—Ç—ã
@dp.message(CoinStatStates.entering_manual_coin)
async def manual_coin_entered(message: Message, state: FSMContext):
    coin = message.text.strip().upper()
    user_id = message.from_user.id

    stats = await db.get_coin_statistics(user_id, coin)
    if not stats:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stat_coin")]
        ])
        await message.answer(f"‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–æ–Ω–µ—Ç–µ {coin}.", reply_markup=keyboard)
        await state.clear()
        return

    text = (
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ {coin}\n\n"
        f"üìã –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}\n"
        f"üìà –û–±—â–∏–π PnL: {stats['average_pnl']:.2f}%\n"
        f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {stats['total_profit']:.2f} USDT\n"
        f"üèÜ Winrate: {stats['winrate']:.2f}%\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {stats['last_trade_date'] or '-'}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="coin_stat_period")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="coin_trade_history")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stat_coin")]
    ])
    await message.answer(text, reply_markup=keyboard)
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–æ–Ω–µ—Ç—ã
async def back_to_coin_stats_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stat_coin")]
    ])
    return keyboard




# 


# 


# 



# 



# 



# 




# 



# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
async def main():
    await db.init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
