import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from config import BOT_TOKEN
from states import TradeForm
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import database as db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É")],
        [KeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É")],
        [KeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥-–∂—É—Ä–Ω–∞–ª. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

def render_trade_template(data: dict) -> str:
    return (
        f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–¥–µ–ª–∫–∏\n\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∞: {data.get('coin') or '-'}\n"
        f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {data.get('timeframe') or '-'}\n"
        f"üì• –í—Ö–æ–¥: {data.get('entry') or '-'}\n"
        f"üíµ –°—É–º–º–∞: {data.get('usdt_amount') or '-'}\n"
        f"üìâ –ö–æ–º–∏—Å—Å–∏—è: {data.get('fee_entry_percent') or '-'}\n"
        f"üéØ –¶–µ–ª—å: {data.get('targets') or '-'}\n"
        f"üõë –°—Ç–æ–ø: {data.get('stop') or '-'}\n"
        f"üìö –ü—Ä–∏—á–∏–Ω–∞: {data.get('reason') or '-'}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {data.get('status') or '-'}\n"
    )

async def show_trade_draft(message_or_callback, state: FSMContext):
    data = await state.get_data()
    text = render_trade_template(data)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™ô –ú–æ–Ω–µ—Ç–∞", callback_data="set_coin")],
        [InlineKeyboardButton(text="‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º", callback_data="set_timeframe")],
        [InlineKeyboardButton(text="üì• –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", callback_data="set_entry")],
        [InlineKeyboardButton(text="üíµ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏", callback_data="set_usdt")],
        [InlineKeyboardButton(text="üìâ –ö–æ–º–∏—Å—Å–∏—è", callback_data="set_fee")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª—å", callback_data="set_targets")],
        [InlineKeyboardButton(text="üõë –°—Ç–æ–ø", callback_data="set_stop")],
        [InlineKeyboardButton(text="üìö –ü—Ä–∏—á–∏–Ω–∞", callback_data="set_reason")],
        [InlineKeyboardButton(text="üìå –°—Ç–∞—Ç—É—Å", callback_data="set_status")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="save_trade")]
    ])

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–ª–∏—á–∞–µ–º callback –∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=markup)
    else:
        await message_or_callback.answer(text, reply_markup=markup)


# –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É"
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É")
async def new_trade(message: Message, state: FSMContext):
    await state.set_state(TradeForm.creating_trade)
    # —Å–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        coin=None, timeframe=None, entry=None,
        usdt_amount=None, fee_entry_percent=None,
        targets=None, stop=None, reason=None,
        status=None, close_price=None, pnl=None,
        tags=None, comment=None
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    await show_trade_draft(message, state)


#–û–±—Ä–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–Ω–µ—Ç–∞"
@dp.callback_query(F.data == "set_coin")
async def set_coin_callback(callback: CallbackQuery, state: FSMContext):
    coins = ["BTC/USDT", "ETH/USDT", "SOL/USDT", "TON/USDT", "DOGE/USDT", "XRP/USDT", "–î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=coin, callback_data=f"coin:{coin}")] for coin in coins
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É:", reply_markup=keyboard)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–¥–Ω—É –∏–∑ –º–æ–Ω–µ—Ç
@dp.callback_query(F.data.startswith("coin:"))
async def coin_chosen(callback: CallbackQuery, state: FSMContext):
    coin = callback.data.split(":")[1]
    if coin == "–î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞":
        await state.set_state(TradeForm.coin_manual)
        await callback.message.edit_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT):")
    else:
        await state.update_data(coin=coin)
        await state.set_state(TradeForm.creating_trade)

        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        await show_trade_draft(callback, state)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–æ–Ω–µ—Ç—ã
@dp.message(TradeForm.coin_manual)
async def trade_coin_manual(message: Message, state: FSMContext):
    await state.update_data(coin=message.text)
    await state.set_state(TradeForm.creating_trade)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
    await show_trade_draft(message, state)

# –í–≤–æ–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
@dp.callback_query(F.data == "set_timeframe")
async def set_timeframe_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1H", callback_data="tf:1H"), InlineKeyboardButton(text="4H", callback_data="tf:4H")],
        [InlineKeyboardButton(text="1D", callback_data="tf:1D"), InlineKeyboardButton(text="1W", callback_data="tf:1W")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=keyboard)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
@dp.callback_query(F.data.startswith("tf:"))
async def timeframe_chosen(callback: CallbackQuery, state: FSMContext):
    tf = callback.data.split(":")[1]
    await state.update_data(timeframe=tf)
    await state.set_state(TradeForm.creating_trade)

    # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await show_trade_draft(callback, state)

# –ö–Ω–æ–ø–∫–∞ "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞"
@dp.callback_query(F.data == "set_entry")
async def set_entry_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.entry)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ ($):")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
@dp.message(TradeForm.entry)
async def trade_entry(message: Message, state: FSMContext):
    try:
        entry_price = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ ($).")
        return

    await state.update_data(entry=entry_price)
    await state.set_state(TradeForm.creating_trade)

    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    await show_trade_draft(message, state)

# –ö–Ω–æ–ø–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏
@dp.callback_query(F.data == "set_usdt")
async def set_usdt_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.usdt_amount)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ USDT:")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
@dp.message(TradeForm.usdt_amount)
async def trade_usdt_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ USDT.")
        return

    await state.update_data(usdt_amount=amount)
    await state.set_state(TradeForm.creating_trade)

    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    await show_trade_draft(message, state)

# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ö–æ–º–∏—Å—Å–∏—è"
# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî –ø–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
@dp.callback_query(F.data == "set_fee")
async def set_fee_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="0.1%", callback_data="fee:0.1"), InlineKeyboardButton(text="0.18%", callback_data="fee:0.18")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç", callback_data="fee:custom")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–º–∏—Å—Å–∏–µ–π
@dp.callback_query(F.data.startswith("fee:"))
async def fee_chosen(callback: CallbackQuery, state: FSMContext):
    fee_value = callback.data.split(":")[1]

    if fee_value == "custom":
        await state.set_state(TradeForm.fee_entry_custom)
        await callback.message.edit_text("–í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é (%):")
    else:
        await state.update_data(fee_entry_percent=float(fee_value))
        await state.set_state(TradeForm.creating_trade)

        # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–±–ª–æ–Ω—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        await show_trade_draft(callback, state)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
@dp.message(TradeForm.fee_entry_custom)
async def fee_entry_custom_manual(message: Message, state: FSMContext):
    try:
        fee = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(fee_entry_percent=fee)
    await state.set_state(TradeForm.creating_trade)

    # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–±–ª–æ–Ω—É
    await show_trade_draft(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ü–µ–ª–∏
@dp.callback_query(F.data == "set_targets")
async def set_targets_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.targets)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500 / 2700):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏
@dp.message(TradeForm.targets)
async def trade_targets(message: Message, state: FSMContext):
    await state.update_data(targets=message.text)
    await state.set_state(TradeForm.creating_trade)

    await show_trade_draft(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ–ø–∞
@dp.callback_query(F.data == "set_stop")
async def set_stop_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.stop)
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Å—Ç–æ–ø ($):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–ø–∞
@dp.message(TradeForm.stop)
async def trade_stop(message: Message, state: FSMContext):
    try:
        stop = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(stop=stop)
    await state.set_state(TradeForm.creating_trade)

    await show_trade_draft(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
@dp.callback_query(F.data == "set_reason")
async def set_reason_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.reason)
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –≤—Ö–æ–¥–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
@dp.message(TradeForm.reason)
async def trade_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await state.set_state(TradeForm.creating_trade)

    await show_trade_draft(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å"
@dp.callback_query(F.data == "set_status")
async def set_status_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –í –ø–æ–∑–∏—Ü–∏–∏", callback_data="status:–í –ø–æ–∑–∏—Ü–∏–∏")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é", callback_data="status:–ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é")],
        [InlineKeyboardButton(text="üõë –ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É", callback_data="status:–ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É")],
        [InlineKeyboardButton(text="‚úã –ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é", callback_data="status:manual_close")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
@dp.callback_query(F.data.startswith("status:"))
async def status_chosen(callback: CallbackQuery, state: FSMContext):
    status_value = callback.data.split(":", 1)[1]

    if status_value == "manual_close":
        await state.set_state(TradeForm.manual_close_price)
        await callback.message.edit_text("üîí –í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è ($) –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:")
    else:
        await state.update_data(status=status_value)
        await state.set_state(TradeForm.creating_trade)
        await show_trade_draft(callback, state)

#–ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(TradeForm.manual_close_price)
async def manual_close_price_handler(message: Message, state: FSMContext):
    try:
        price = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è ($).")
        return

    await state.update_data(manual_close_price=price)

    # –ö–Ω–æ–ø–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="0.1%", callback_data="manualfee:0.1"),
         InlineKeyboardButton(text="0.18%", callback_data="manualfee:0.18")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manualfee:custom")]
    ])

    await state.set_state(TradeForm.manual_close_fee_select)
    await message.answer("üìâ –í—ã–±–µ—Ä–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏
@dp.callback_query(F.data.startswith("manualfee:"))
async def manual_close_fee_handler(callback: CallbackQuery, state: FSMContext):
    fee_value = callback.data.split(":")[1]

    if fee_value == "custom":
        await state.set_state(TradeForm.manual_close_fee_custom)
        await callback.message.edit_text("üìâ –í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ (%):")
    else:
        price = (await state.get_data()).get("manual_close_price")
        await state.update_data(
            status=f"–ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é ${price}, –∫–æ–º–∏—Å—Å–∏—è {fee_value}%",
            manual_close_price=None
        )
        await state.set_state(TradeForm.creating_trade)
        await show_trade_draft(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∏—Å—Å–∏–∏
@dp.message(TradeForm.manual_close_fee_custom)
async def manual_fee_custom_entry(message: Message, state: FSMContext):
    try:
        fee = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (%).")
        return

    price = (await state.get_data()).get("manual_close_price")
    await state.update_data(
        status=f"–ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é ${price}, –∫–æ–º–∏—Å—Å–∏—è {fee}%",
        manual_close_price=None
    )
    await state.set_state(TradeForm.creating_trade)
    await show_trade_draft(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É"
@dp.callback_query(F.data == "save_trade")
async def ask_comment_choice(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="comment:yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="comment:no")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="comment:back")]
    ])
    await callback.message.edit_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–¥–∞/–Ω–µ—Ç)
@dp.callback_query(F.data.startswith("comment:"))
async def comment_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]

    if choice == "yes":
        await state.set_state(TradeForm.comment)
        await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ:")
    elif choice == "no":
        await state.update_data(comment=None)
        await finalize_trade(callback, state)
    elif choice == "back":
        await state.set_state(TradeForm.creating_trade)
        await show_trade_draft(callback, state)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
def validate_trade_data(data: dict) -> tuple[bool, list[str]]:
    missing_fields = []

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
    if not data.get('coin'):
        missing_fields.append("–º–æ–Ω–µ—Ç–∞")
    if not data.get('entry'):
        missing_fields.append("—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞")
    if not data.get('usdt_amount'):
        missing_fields.append("—Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ (USDT)")
    if not data.get('fee_entry_percent'):
        missing_fields.append("–∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—Ö–æ–¥–µ")
    if not data.get('status'):
        missing_fields.append("—Å—Ç–∞—Ç—É—Å")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status = data.get('status')
    if status == "–ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é" and not data.get('targets'):
        missing_fields.append("—Ü–µ–ª—å")
    if status == "–ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É" and not data.get('stop'):
        missing_fields.append("—Å—Ç–æ–ø")

    return len(missing_fields) == 0, missing_fields


# –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É
@dp.callback_query(F.data == "back_to_draft")
async def back_to_draft(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TradeForm.creating_trade)
    await show_trade_draft(callback, state)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç—ã
async def finalize_trade(source: Message | CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    is_valid, missing = validate_trade_data(data)
    if not is_valid:
        missing_text = ", ".join(missing)
        warning = f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:\n\nüî∏ {missing_text}"

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É", callback_data="back_to_draft")]
        ])

        if isinstance(source, CallbackQuery):
            await source.message.edit_text(warning, reply_markup=markup)
        else:
            await source.answer(warning)
            await source.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:", reply_markup=markup)
        return


    entry = data.get("entry")
    usdt_amount = data.get("usdt_amount")
    entry_fee = data.get("fee_entry_percent", 0.0)
    status = data.get("status")

    close_price = None
    exit_fee = 0.0
    profit = None
    pnl = None
    trade_status = "–æ—Ç–∫—Ä—ã—Ç–∞"

    try:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—Ö–æ–¥
        coins = (usdt_amount / entry) * (1 - entry_fee / 100)
    except ZeroDivisionError:
        if isinstance(source, CallbackQuery):
            await source.message.edit_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: –ø—Ä–æ–≤–µ—Ä—å –≤—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É –∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.")
        else:
            await source.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: –ø—Ä–æ–≤–µ—Ä—å –≤—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É –∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.")
        return

    if status == "–ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é":
        close_price = float(data.get("targets").split("/")[0].strip())
        exit_fee = 0.18
        trade_status = "–∑–∞–∫—Ä—ã—Ç–∞"
    elif status == "–ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É":
        close_price = float(data.get("stop"))
        exit_fee = 0.18
        trade_status = "–∑–∞–∫—Ä—ã—Ç–∞"
    elif status.startswith("–ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é"):
        close_price = float(data.get("close_price"))
        exit_fee = float(data.get("fee_exit"))
        trade_status = "–∑–∞–∫—Ä—ã—Ç–∞"

    if close_price:
        final_usdt = (coins * close_price) * (1 - exit_fee / 100)
        profit = final_usdt - usdt_amount
        pnl = (profit / usdt_amount) * 100
        data["close_price"] = close_price
        data["pnl"] = round(pnl, 2)
        data["profit_usdt"] = round(profit, 2)
        data["fee_exit_percent"] = exit_fee
    else:
        data["close_price"] = None
        data["pnl"] = None
        data["profit_usdt"] = None
        data["fee_exit_percent"] = None

    # –£–ø—Ä–æ—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ "–æ—Ç–∫—Ä—ã—Ç–∞"/"–∑–∞–∫—Ä—ã—Ç–∞"
    data["status"] = trade_status

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    user_id = source.from_user.id
    chat_id = source.message.chat.id if isinstance(source, CallbackQuery) else source.chat.id
    await db.insert_trade(user_id, chat_id, data)
    await state.clear()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    comment = data.get("comment") or "-"
    base_msg = (
        f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {trade_status.capitalize()}\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∞: #{data.get('coin')}\n"
        f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {data.get('timeframe') or '-'}\n"
        f"üì• –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry}\n"
        f"üíµ –°—É–º–º–∞: {usdt_amount} USDT\n"
        f"üéØ –¶–µ–ª—å: {data.get('targets') or '-'}\n"
        f"üõë –°—Ç–æ–ø: {data.get('stop') or '-'}\n"
        f"üìö –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    )

    if trade_status == "–∑–∞–∫—Ä—ã—Ç–∞":
        base_msg += (
            f"üìâ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {close_price}\n"
            f"üìà PnL: {data['pnl']}%\n"
            f"üí∞ –ü—Ä–æ—Ñ–∏—Ç: {data['profit_usdt']} USDT\n"
        )

    await source.message.answer(base_msg)


# –ï—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@dp.message(TradeForm.comment)
async def save_comment_and_trade(message: Message, state: FSMContext):
    await state.update_data(comment=message.text.strip())
    await finalize_trade(message, state)























# –í–≤–æ–¥ —Ç–µ–≥–æ–≤
@dp.message(TradeForm.tags)
async def trade_tags(message: Message, state: FSMContext):
    await state.update_data(tags=message.text)
    await state.set_state(TradeForm.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ -):")

# –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É
@dp.message(TradeForm.comment)
async def trade_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    if comment == "-":
        comment = ""
    await state.update_data(comment=comment)

    data = await state.get_data()
    await db.insert_trade(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        data=data
    )

    await message.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–•–æ—á–µ—à—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –ù–∞–ø–∏—à–∏ /stats")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
@dp.message(F.text == "/stats")
async def stats_handler(message: Message):
    total, avg_pnl, wins, total_profit = await db.get_stats(message.from_user.id)

    if total == 0 or total is None:
        await message.answer("üòï –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏. –î–æ–±–∞–≤—å –µ—ë —á–µ—Ä–µ–∑ /newtrade")
        return

    avg_pnl = avg_pnl or 0
    wins = wins or 0
    total_profit = total_profit or 0
    winrate = (wins / total * 100)

    await message.answer(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total}\n"
        f"–°—Ä–µ–¥–Ω–∏–π PnL: {avg_pnl:.2f}%\n"
        f"Winrate: {winrate:.1f}%\n"
        f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.2f} USDT"
    )

# –ö–æ–º–∞–Ω–¥–∞ /open - –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
@dp.message(F.text == "/open")
async def view_open_trades(message: Message):
    open_trades = await db.get_user_open_trades(message.from_user.id)

    if not open_trades:
        await message.answer("üü¢ –£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    response = "üßæ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n\n"
    for i, trade in enumerate(open_trades, 1):
        coin, tf, entry, targets, stop, reason, created_at = trade
        response += (
            f"#{i} | {coin} [{tf}]\n"
            f"–í—Ö–æ–¥: ${entry:.2f}\n"
            f"–¶–µ–ª—å: {targets}\n"
            f"–°—Ç–æ–ø: ${stop:.2f}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–î–∞—Ç–∞: {created_at.split(' ')[0]}\n"
            f"---\n"
        )

    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /closetrade - –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
@dp.message(F.text == "/closetrade")
async def closetrade_start(message: Message, state: FSMContext):
    trades = await db.get_open_trades(message.from_user.id)
    if not trades:
        await message.answer("üòé –£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    buttons = []
    for trade in trades:
        trade_id, coin, entry, stop, targets = trade
        label = f"{trade_id}: {coin} @ {entry}$ ‚Üí –¶–µ–ª—å {targets}"
        buttons.append(KeyboardButton(text=label))

    markup = ReplyKeyboardMarkup(keyboard=[buttons[i:i+1] for i in range(len(buttons))], resize_keyboard=True)
    await state.set_state(TradeForm.close_trade_id)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–¥–µ–ª–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(TradeForm.close_trade_id)
async def select_trade_to_close(message: Message, state: FSMContext):
    try:
        trade_id = int(message.text.split(":")[0])
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(trade_id=trade_id)
    await state.set_state(TradeForm.close_price_input)
    await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è ($):", reply_markup=types.ReplyKeyboardRemove())

# –í–≤–æ–¥ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(TradeForm.close_price_input)
async def input_close_price(message: Message, state: FSMContext):
    try:
        close_price = float(message.text.strip())
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(close_price_input=close_price)
    await state.set_state(TradeForm.fee_exit)
    await message.answer("üìâ –í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (%):")

# –í–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏ —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
@dp.message(TradeForm.fee_exit)
async def input_fee_exit(message: Message, state: FSMContext):
    try:
        fee_exit_percent = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(fee_exit_percent=fee_exit_percent)
    data = await state.get_data()

    trade_id = data["trade_id"]
    close_price = data["close_price_input"]

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
    async with aiosqlite.connect("trades.db") as conn:
        async with conn.execute('''
            SELECT entry, usdt_amount, fee_entry_percent
            FROM trades
            WHERE id = ?
        ''', (trade_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            entry, usdt_amount, fee_entry_percent = row

    # –†–∞—Å—á—ë—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—Ö–æ–¥
    coins_bought = (usdt_amount / entry) * (1 - fee_entry_percent / 100)

    # –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã—Ö–æ–¥
    final_usdt = (coins_bought * close_price) * (1 - fee_exit_percent / 100)

    # –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏
    profit_usdt = final_usdt - usdt_amount

    # PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    pnl = (profit_usdt / usdt_amount) * 100

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await db.close_trade(
        trade_id,
        close_price,
        round(pnl, 2),
        round(profit_usdt, 2),
        fee_exit_percent
    )

    await message.answer(
        f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
        f"üìâ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${close_price}\n"
        f"üìà PnL: {pnl:.2f}%\n"
        f"üí∞ –ü—Ä–æ—Ñ–∏—Ç: {profit_usdt:.2f} USDT"
    )
    await state.clear()



# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
async def main():
    await db.init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
