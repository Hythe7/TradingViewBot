import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from config import BOT_TOKEN
from states import TradeForm
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import database as db

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥-–∂—É—Ä–Ω–∞–ª. –ù–∞–ø–∏—à–∏ /newtrade —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ /newtrade - –Ω–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
@dp.message(F.text == "/newtrade")
async def new_trade(message: Message, state: FSMContext):
    await state.set_state(TradeForm.coin)
    await message.answer("–ú–æ–Ω–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ETH/USDT):")

# –í–≤–æ–¥ –º–æ–Ω–µ—Ç—ã
@dp.message(TradeForm.coin)
async def trade_coin(message: Message, state: FSMContext):
    await state.update_data(coin=message.text)
    await state.set_state(TradeForm.timeframe)
    await message.answer("–¢–∞–π–º—Ñ—Ä–µ–π–º (1H, 4H, D1):")

# –í–≤–æ–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
@dp.message(TradeForm.timeframe)
async def trade_timeframe(message: Message, state: FSMContext):
    await state.update_data(timeframe=message.text)
    await state.set_state(TradeForm.entry)
    await message.answer("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ ($):")

# –í–≤–æ–¥ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
@dp.message(TradeForm.entry)
async def trade_entry(message: Message, state: FSMContext):
    await state.update_data(entry=float(message.text))
    await state.set_state(TradeForm.usdt_amount)
    await message.answer("üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ USDT:")

# –í–≤–æ–¥ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏
@dp.message(TradeForm.usdt_amount)
async def trade_usdt_amount(message: Message, state: FSMContext):
    await state.update_data(usdt_amount=float(message.text))
    await state.set_state(TradeForm.fee_entry)
    await message.answer("üìâ –í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ (%):")

# –í–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—Ö–æ–¥
@dp.message(TradeForm.fee_entry)
async def trade_fee_entry(message: Message, state: FSMContext):
    await state.update_data(fee_entry_percent=float(message.text))
    await state.set_state(TradeForm.targets)
    await message.answer("–¶–µ–ª—å (–ø—Ä–∏–º–µ—Ä: 2500 / 2700):")

# –í–≤–æ–¥ —Ü–µ–ª–µ–π
@dp.message(TradeForm.targets)
async def trade_targets(message: Message, state: FSMContext):
    await state.update_data(targets=message.text)
    await state.set_state(TradeForm.stop)
    await message.answer("–°—Ç–æ–ø ($):")

# –í–≤–æ–¥ —Å—Ç–æ–ø–∞
@dp.message(TradeForm.stop)
async def trade_stop(message: Message, state: FSMContext):
    await state.update_data(stop=float(message.text))
    await state.set_state(TradeForm.reason)
    await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞:")

# –í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
@dp.message(TradeForm.reason)
async def trade_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await state.set_state(TradeForm.status)
    await message.answer("–°—Ç–∞—Ç—É—Å: –í –ø–æ–∑–∏—Ü–∏–∏ / –ó–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é / –ó–∞–∫—Ä—ã—Ç–æ –ø–æ —Å—Ç–æ–ø—É / –ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é")

# –í–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
@dp.message(TradeForm.status)
async def trade_status(message: Message, state: FSMContext):
    await state.update_data(status=message.text)
    await state.set_state(TradeForm.close_price)
    await message.answer("–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ($), –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ. –ò–ª–∏ –Ω–∞–ø–∏—à–∏ -")

# –í–≤–æ–¥ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(TradeForm.close_price)
async def trade_close_price(message: Message, state: FSMContext):
    close_text = message.text.strip()
    close_price = float(close_text) if close_text != "-" else None
    await state.update_data(close_price=close_price)
    await state.set_state(TradeForm.pnl)
    await message.answer("PnL (%), –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å. –ò–ª–∏ –Ω–∞–ø–∏—à–∏ -")

# –í–≤–æ–¥ PnL
@dp.message(TradeForm.pnl)
async def trade_pnl(message: Message, state: FSMContext):
    pnl_text = message.text.strip()
    pnl = float(pnl_text) if pnl_text != "-" else None
    await state.update_data(pnl=pnl)
    await state.set_state(TradeForm.tags)
    await message.answer("–¢–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #TON #–æ—Ç–∫–∞—Ç):")

# –í–≤–æ–¥ —Ç–µ–≥–æ–≤
@dp.message(TradeForm.tags)
async def trade_tags(message: Message, state: FSMContext):
    await state.update_data(tags=message.text)
    await state.set_state(TradeForm.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ -):")

# –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É
@dp.message(TradeForm.comment)
async def trade_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    if comment == "-":
        comment = ""
    await state.update_data(comment=comment)

    data = await state.get_data()
    await db.insert_trade(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        data=data
    )

    await message.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–•–æ—á–µ—à—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –ù–∞–ø–∏—à–∏ /stats")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
@dp.message(F.text == "/stats")
async def stats_handler(message: Message):
    total, avg_pnl, wins, total_profit = await db.get_stats(message.from_user.id)

    if total == 0 or total is None:
        await message.answer("üòï –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏. –î–æ–±–∞–≤—å –µ—ë —á–µ—Ä–µ–∑ /newtrade")
        return

    avg_pnl = avg_pnl or 0
    wins = wins or 0
    total_profit = total_profit or 0
    winrate = (wins / total * 100)

    await message.answer(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total}\n"
        f"–°—Ä–µ–¥–Ω–∏–π PnL: {avg_pnl:.2f}%\n"
        f"Winrate: {winrate:.1f}%\n"
        f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.2f} USDT"
    )

# –ö–æ–º–∞–Ω–¥–∞ /open - –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
@dp.message(F.text == "/open")
async def view_open_trades(message: Message):
    open_trades = await db.get_user_open_trades(message.from_user.id)

    if not open_trades:
        await message.answer("üü¢ –£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    response = "üßæ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n\n"
    for i, trade in enumerate(open_trades, 1):
        coin, tf, entry, targets, stop, reason, created_at = trade
        response += (
            f"#{i} | {coin} [{tf}]\n"
            f"–í—Ö–æ–¥: ${entry:.2f}\n"
            f"–¶–µ–ª—å: {targets}\n"
            f"–°—Ç–æ–ø: ${stop:.2f}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–î–∞—Ç–∞: {created_at.split(' ')[0]}\n"
            f"---\n"
        )

    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /closetrade - –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
@dp.message(F.text == "/closetrade")
async def closetrade_start(message: Message, state: FSMContext):
    trades = await db.get_open_trades(message.from_user.id)
    if not trades:
        await message.answer("üòé –£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    buttons = []
    for trade in trades:
        trade_id, coin, entry, stop, targets = trade
        label = f"{trade_id}: {coin} @ {entry}$ ‚Üí –¶–µ–ª—å {targets}"
        buttons.append(KeyboardButton(text=label))

    markup = ReplyKeyboardMarkup(keyboard=[buttons[i:i+1] for i in range(len(buttons))], resize_keyboard=True)
    await state.set_state(TradeForm.close_trade_id)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–¥–µ–ª–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(TradeForm.close_trade_id)
async def select_trade_to_close(message: Message, state: FSMContext):
    try:
        trade_id = int(message.text.split(":")[0])
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(trade_id=trade_id)
    await state.set_state(TradeForm.close_price_input)
    await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è ($):", reply_markup=types.ReplyKeyboardRemove())

# –í–≤–æ–¥ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
@dp.message(TradeForm.close_price_input)
async def input_close_price(message: Message, state: FSMContext):
    try:
        close_price = float(message.text.strip())
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(close_price_input=close_price)
    await state.set_state(TradeForm.fee_exit)
    await message.answer("üìâ –í–≤–µ–¥–∏ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (%):")

# –í–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏ —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
@dp.message(TradeForm.fee_exit)
async def input_fee_exit(message: Message, state: FSMContext):
    try:
        fee_exit_percent = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(fee_exit_percent=fee_exit_percent)
    data = await state.get_data()

    trade_id = data["trade_id"]
    close_price = data["close_price_input"]

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
    async with aiosqlite.connect("trades.db") as conn:
        async with conn.execute('''
            SELECT entry, usdt_amount, fee_entry_percent
            FROM trades
            WHERE id = ?
        ''', (trade_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            entry, usdt_amount, fee_entry_percent = row

    # –†–∞—Å—á—ë—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—Ö–æ–¥
    coins_bought = (usdt_amount / entry) * (1 - fee_entry_percent / 100)

    # –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã—Ö–æ–¥
    final_usdt = (coins_bought * close_price) * (1 - fee_exit_percent / 100)

    # –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏
    profit_usdt = final_usdt - usdt_amount

    # PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    pnl = (profit_usdt / usdt_amount) * 100

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await db.close_trade(
        trade_id,
        close_price,
        round(pnl, 2),
        round(profit_usdt, 2),
        fee_exit_percent
    )

    await message.answer(
        f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
        f"üìâ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${close_price}\n"
        f"üìà PnL: {pnl:.2f}%\n"
        f"üí∞ –ü—Ä–æ—Ñ–∏—Ç: {profit_usdt:.2f} USDT"
    )
    await state.clear()







# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
async def main():
    await db.init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
